Toolchains to setup react-
1) Vite
2) Gatsby
3) NextJS
4) Create React App (deprecated)
5) via CDN in script tag

Setting up react from scratch-

Package Management (NPM, Yarn)
Module bundling (Webpack, Parcel)
Compilation (Babel)
React itself

Creating a new react app with Vite-

    npm create vite@latest my-react-app -- --template react

Using existing repo-

    npm create vite@latest . -- --template react

React features-

-> React is composable in nature allowing to make components which can be reused, organized & imported as required
-> React components are JS functions which uses JSX syntax which allows to write HTML-like markup inside JS file

React DevTools-

-> checking component props and state (components Tab)
-> checking component rendering performance (Profiler Tab)
-> checking context values passed to components and global state 

Rules of JSX-

1) All react components start with capital letter to differentiate from usual markup
2) Return a single root element (fragments can be used) 
3) Close all the tags
4) camelCase for most things

JavaScript in JSX with Curly Braces-

You can only use curly braces in two ways inside JSX-

1) As text directly inside a JSX tag
2) As attributes immediately following the = sign
3) Double curlies are used to write inline CSS and objects to JSX

React Pitfalls-

-> Components can render other components, never nest their definitions instead use props to pass data

React props-

    function Button(props) {
    const buttonStyle = {
        color: props.color,
        fontSize: props.fontSize + 'px'
        };

    return (
        <button style={buttonStyle}>{props.text}</button>
        );
    }

    export default function App() {
    return (
        <div>
            <Button text="Click Me!" color="blue" fontSize={12} />
        </div>
        );
    }

-> Props are properties passed to components written like attributes inside component calls 
-> Props can only be passed from parent to child components and is read only

Prop destructuring and Default Props-

    function Button({ text = "Click Me!", color = "blue", fontSize = 12 }) {
    const buttonStyle = {
        color: color,
        fontSize: fontSize + "px"
    };

    return <button style={buttonStyle}>{text}</button>;
    }

    export default function App() {
    return (
        <div>
            <Button />
            <Button text="Don't Click Me!" color="red" />
            <Button fontSize={20} />
        </div>
        );
    }

-> Unpacking your props in the component arguments allows for more concise and readable code
-> Default props helps in only sending required props to child components 

Callback props-

-> Callback prop is a function passed as prop to get data from child to parent component

React hooks-

-> Hooks are special react functions for managing components (for eg: useState)
-> Hooks can only be called from the top level of a functional component
-> Hooks canâ€™t be called from inside loops or conditions