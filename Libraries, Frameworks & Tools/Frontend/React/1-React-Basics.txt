Toolchains to setup react-
1) Vite
2) Gatsby
3) NextJS
4) Create React App (deprecated)
5) via CDN in script tag

Setting up react from scratch-

Package Management (NPM, Yarn)
Module bundling (Webpack, Parcel)
Compilation (Babel)
React itself

Creating a new react app with Vite-

    npm create vite@latest my-react-app -- --template react

Using existing repo-

    npm create vite@latest . -- --template react

React features-

-> React is composable in nature allowing to make components which can be reused, organized & imported as required
-> React components are JS functions which uses JSX syntax which allows to write HTML-like markup inside JS file

React DevTools-

-> checking component props and state (components Tab)
-> checking component rendering performance (Profiler Tab)
-> checking context values passed to components and global state 

Rules of JSX-

1) All react components start with capital letter to differentiate from usual markup
2) Return a single root element (fragments can be used) 
3) Close all the tags
4) camelCase for most things

JavaScript in JSX with Curly Braces-

You can only use curly braces in two ways inside JSX-

1) As text directly inside a JSX tag
2) As attributes immediately following the = sign

-> double curlies are used to write inline CSS and objects to JSX

React Pitfalls-

-> Components can render other components, never nest their definitions instead use props to pass data

React props-

    <MyComponent varName = "data">

    function MyComponent() {
        return (
            <p> My value is { props.varName } </p>
        )
    }

-> Props are properties passed to components written like attributes inside component calls 
-> Props can only be passed from parent to child components and is read only

Callback props-

-> Callback prop is a function passed as prop to get data from child to parent component

React hooks-

-> Hooks are special react functions for managing component state and other properties 