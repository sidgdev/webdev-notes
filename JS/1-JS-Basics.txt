Injecting JS in HTML-

    <head>
        <script src="program.js" defer></script>
    </head>

-> defer keyword makes browser load JS after HTML file is rendered

JS release timelines-

ES1: June 1997
ES2: June 1998 
ES3: Dec. 1999 
ES4: Abandoned
ES5: December 2009
ES6/ES2015: June 2015
ES2016 (ES7): June 2016
ES2017 (ES8): June 2017
ES.Next

Strict mode-

    "use strict";

-> Strict mode applies to entire scripts or to individual functions, classes and modules are automatically in strict mode
-> Using strict mode in functions with rest, default, or destructured parameters is syntax error
-> Strict mode throws errors for certain mistakes silent in non strict mode & helps in writing more secure JS code

Comments in JS-

    // This is an in-line comment.
    /* This is a
    multi-line comment */

Declaring a variable-

    var varOne;
    let varTwo; (ES6) 
    const varThree; (ES6)

-> Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number
-> let is preferred way of declaring variables and constants with const under ES6 standard
-> while var variables have global/function scope, let and const variables have block scope 

A value can be assigned with the assignment operator (=)-

    myVariable = 5;

JS datatypes-

Number (integer/float, Infinity, -Infinity, NaN)
BigInt 
String
Boolean (true/false)
Symbol
Null (null)
Undefined (undefined)
Object 

-> When variables are declared, they have an initial value of undefined 
-> If you do a mathematical operation on an undefined variable, your result will be NaN which means "Not a Number" 
-> If you concatenate a string with an undefined variable, you will get a literal string of "undefined"

Strings in JS-

-> String in JS are enclosed in single quote ('), double quote (") or backtick (`) - (template literals) 
-> String values are immutable and can only be reassigned
-> Escape sequences can be used in strings as required 

Escape sequences-

Code	Output

\'		single quote
\"		double quote
\\		backslash
\n		newline
\r		carriage return
\t		tab
\b		word boundary
\f		form feed

String concatenation-

    let str1 = 'Hello';
    let str2 = 'World';
    let str = str1+str2; // str = 'HelloWorld'

-> .length returns length of any string literal or variable

    "Alan Peter".length; // returns 10

Accessing character at specific index- 

    let firstName = 'Charles';
    let firstLetter = firstName[0]; // firstLetter = 'C'

JS arithmetic operators-

Operator 	Description

+ 			Addition
- 			Subtraction
* 			Multiplication
/ 			Division
% 			Modulus (Remainder)
** 			Exponentiation (ES2016)
++ 			Increment (prefix/postfix)
-- 			Decrement (prefix/postfix)
+           Unary plus
-           Unary negation

Shorthand notation-

    num+=2; -> num=num+2; (works with -,*,/) 

Comparison operators-

Operator    Description

==          Equality
!=          Inequality
===         Strict equality
!==         Strict inequality
<           Less than
>           Greater than
<=          Less than or equal to
>=          Greater than or equal to 

Logical operators-

Operator    Description

||          OR operator
&&          AND operator
!           NOT operator

Control structures-

if-else block-

    if (cond1) {    
        ...
    }
    else if (cond2) {
        ...
    }
    else {
        ...
    }

switch statement-

    switch (expression) {
        case choice1 :  ...
                        break;
        case choice2 :  ...
                        break;
        default: ...
    }

Ternary operator-

Cond ? true eval : false eval;

for loop- 

    for ([initialExp]; [conditionExp]; [updateExp]) {
        ...
    }
  
do while loop-

    do {
        ...
    } while (condition);

while loop-

    while (condition) {
        ...
    }

Functions declarations-

    function funcName (arg1, arg2, ...argN) {
        ...
        return;
    }

Function expressions-

    let funcName = function() {
        ...
    }

-> Functions are values in JS and can be used in expressions and function parameters as well
-> Function declarations are globally scoped and available everywhere in script
-> Function expressions are only created when execution reaches them and unavailable to call before
-> In strict mode, functions declared inside a block is visible only inside that block 

Arrow functions (ES6)-

    let funcName = (arg1, arg2, ...argN) => expression;
    let funcName = arg => expression;
    let funcName = () => expression;
    let funcName = (...) => {
        ...
    }

Arrays-

    const person = ["John", "Doe", 46];
    const carBrand = new Array ("KTM", "Volvo", "BMW");

    let car = carBrand[0]; // car = "KTM"

-> .length returns number of items in Array

Array functions-

.map() - creates new array populated with results of provided function on every element in calling array
.filter() - creates shallow copy filtered down to elements from given array that pass test implemented by provided function
.forEach() - executes a provided function once for each array element
.push() - adds new items at end of array and returns new length
.pop() - removes last item of array and returns that item
.shift() - removes first item of array and returns that item
.unshift() - adds new items at start of array and returns new length
.concat() - merges multiple arrays and returns merged array
.splice() - removes n items and add new items at given index and returns removed items
.slice() - returns a part of array at specified indexes 

Objects-

    let user = new Object();    // "object constructor" syntax
    let user = {};              // "object literal" syntax

    let user = {            // an object
        name: "John",       // key "name" store value "John"
        age: 30             // key "age" store value 30
        "is admin": true    // key "is admin" store true
    };

Dot notation-

    name = user.name;    // name has value "John"

Square notation- (used for identifiers with whitespaces)

    adminCheck = user["is admin"];    // adminCheck has value true

"delete" operator-

    delete user.age;    // Removes "age" property from user object

Property value shorthand-

    function makeUser(name, age) {
    return {
        name: name,
        age: age,
        };
    }
    let user = makeUser("John", 30);

    function makeUser(name, age) {
    return {
        name,    // same as name: name
        age,     // same as age: age
        };
    }

-> Property names have no limitations, can use any strings or symbols even reserved keywords
-> Accessing non-existing property returns undefined which can tell if an object has given property

"in" operator-

    let user = { name: "John", age: 30 };
    alert( "age" in user );     // true, user.age exists
    alert( "city" in user );    // false, user.city doesn't exist

for in loop-

    for (let key in user) {
        alert( key );           // Shows each property in object
        alert( user[key] );     // Shows value of each property
    }

-> Integer properties are accessed in ascending order, normal properties are accessed in creation order

Spread syntax (...)-

-> spreads arrays, strings, objects in function calls or array/object literals (objects don't spread in array literals)

    func (a, ...arr, b)
    [1, ...obj, ...'str', 6, 'xyz']
    {...obj, key: 'value'}

try/catch block-

    try {
        tryStatements
    } catch (exceptionVar) {
        catchStatements
    } finally {
        finallyStatements
    }

-> try/catch block handles errors by executing code in try block and catching exceptions in catch block
-> finally block executes code after try and catch, regardless of whether an error occurred or not

Working with JSON-

parse() - accepts a JSON string as a parameter, and returns the corresponding JavaScript object
stringify() - accepts an object as a parameter, and returns the equivalent JSON string

Callback functions-

-> Callback function is function passed into another function as argument invoked inside outer function to complete some routine/action
-> Callback functions can be synchronous or asynchronous depending on context

    var fs = require('fs')
    fs.readFile('movie.mp4', finishedReading)

    function finishedReading(error, movieData) {
    if (error) return console.error(error)
    // do something with the movieData
    }

Promises-

-> Promise object represents eventual completion (or failure) of asynchronous operation and its resulting value
-> then() executes if promise is resolved and catch() executes if promise is rejected
-> finally() executes regardless of success or failure
-> then() method can be chained, each then() receives the result of the previous then()'s return value
-> If promise has already resolved but then is called again, the callback immediately fires
-> If the promise is rejected and you call then after rejection, the callback is never called

    var p = new Promise(function(resolve, reject) {
        // Do an async task async task and then...
        if(/* good condition */) {
            resolve('Success!');
        }
        else {
            reject('Failure!');
        }
    });

    p.then(function(result) { 
        /* do something with the result */
    }).catch(function() {
        /* error :( */
    }).finally(function() {
    /* executes regardless or success for failure */ 
    });

-> Promise.all() method takes array of promises and fires one callback once they are all resolved-

    Promise.all([promise1, promise2]).then(function(results) {
        // Both promises resolved
    })
    .catch(function(error) {
        // One or more promises was rejected
    });

 -> Promise.race() triggers as soon as any promise in the array is resolved or rejected

 async & await-

    async function getPersonsInfo(name) {
        const people = await server.getPeople();
        const person = people.find(person => { return person.name === name });
        return person;
    }

-> async & await is syntactical sugar for promises
-> Making function async makes it return a promise & await pauses execution until a promise is resolved or rejected
-> await keyword can only be used inside async functions
